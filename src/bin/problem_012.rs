use num::ToPrimitive;
use project_euler_solutions::factors::factors;
use project_euler_solutions::series::triangles::triangles;

// Highly divisible triangular number
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

fn first_triangular_num_with_n_divisors(n: usize) -> u32 {
    triangles()
        .filter(|i| factors(&i.to_u64().unwrap()).count() * 2 > n)
        .next()
        .unwrap()
}

#[cfg(test)]
fn problem_012_example() -> u32 {
    first_triangular_num_with_n_divisors(5)
}

fn problem_012() -> u32 {
    first_triangular_num_with_n_divisors(500)
}

fn main() {
    println!("{}", problem_012())
}

#[cfg(test)]
mod tests {
    use crate::{problem_012, problem_012_example};

    #[test]
    fn test_problem_012_example() {
        let result = problem_012_example();
        assert_eq!(result, 28);
    }

    #[test]
    fn test_problem_012() {
        let result = problem_012();
        assert_eq!(result, 76576500);
    }
}
